{"version":3,"sources":["services/phonesbooks.js","modules/Phonebook.js","modules/Footer.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newContact","post","id","put","console","log","delete","status","Persons","person","handleDeletion","name","number","onClick","Phonebook","useState","persons","setPersons","newName","setNewName","newPhone","setNewPhone","newSearch","setSearch","notificationMessage","setNotificationMessage","notificationType","setNotificationType","useEffect","phoneBookService","initialPersons","contactsToShow","filter","p","includes","Notification","message","type","className","value","onChange","event","target","onSubmit","preventDefault","newObj","personExists","find","returnedPerson","setTimeout","concat","window","confirm","map","result","catch","error","deletePerson","Footer","style","color","fontStyle","fontSize","Register","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc43862d.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl) \r\n    return request.then( response => response.data)\r\n}\r\n\r\nconst create = newContact => {\r\n    const request = axios.post(baseUrl,newContact) \r\n    return request.then( response => response.data)\r\n}\r\n\r\nconst update = (id,newContact) => {\r\n    const request = axios.put(`${baseUrl}/${id}`,newContact) \r\n    return request.then( response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n    console.log(id)\r\n    console.log(`${baseUrl}`/`${id}`)\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then( response => response.status)\r\n}\r\n\r\nexport default { getAll, create, update, remove}","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport phoneBookService from '../services/phonesbooks'\r\n\r\nconst Persons = ({ person, handleDeletion }) => {\r\n    return (\r\n        <li>{person.name}: {person.number}\r\n\r\n            <button onClick={handleDeletion}> Delete</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nconst Phonebook = () => {\r\n    const [persons, setPersons] = useState([\r\n        { name: 'Arto Hellas', number: '040-123456' },\r\n        { name: 'Ada Lovelace', number: '39-44-5323523' },\r\n        { name: 'Dan Abramov', number: '12-43-234345' },\r\n        { name: 'Mary Poppendieck', number: '39-23-6423122' }\r\n    ])\r\n    const [newName, setNewName] = useState('')\r\n    const [newPhone, setNewPhone] = useState('')\r\n    const [newSearch, setSearch] = useState('')\r\n    const [notificationMessage, setNotificationMessage] = useState('')\r\n    const [notificationType, setNotificationType] = useState('')\r\n\r\n    useEffect(() => {\r\n        phoneBookService\r\n            .getAll()\r\n            .then(initialPersons => {\r\n                console.log('promise fulfilled')\r\n                setPersons(initialPersons)\r\n            })\r\n    }, [])\r\n\r\n    const handlePersonNameChange = (event) => {\r\n        console.log(event.target.value)\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    const handlePersonPhoneChange = (event) => {\r\n        setNewPhone(event.target.value)\r\n    }\r\n\r\n    const handleFilter = (event) => {\r\n        setSearch(event.target.value)\r\n        console.log(newSearch)\r\n    }\r\n\r\n    const contactsToShow = newSearch === '' ? persons : persons.filter(p => p.name.includes(newSearch))\r\n\r\n    const addPerson = (event) => {\r\n        event.preventDefault()\r\n        console.log(\"button clicked\", event.target)\r\n\r\n        const newObj = {\r\n            name: newName,\r\n            number: newPhone,\r\n        }\r\n\r\n        const personExists = persons.find(p => p.name === newObj.name)\r\n\r\n        console.log(personExists)\r\n\r\n        if (personExists == null) {\r\n            console.log(\"it gets in\")\r\n            phoneBookService\r\n                .create(newObj)\r\n                .then(returnedPerson => {\r\n                    setNotificationMessage(\"Added \" + returnedPerson.name)\r\n                    setNotificationType(\"success\")\r\n\r\n                    setTimeout(() => {\r\n                        setNotificationMessage(\"\")\r\n                        setNotificationType(\"\")\r\n                    }, 5000)\r\n\r\n                    setPersons(persons.concat(returnedPerson))\r\n                    setNewName('')\r\n                    setNewPhone('')\r\n                })\r\n        }\r\n        else if (personExists != null) {\r\n            const confirmation = window.confirm(`should update person ${personExists.name} `)\r\n\r\n            if (confirmation === true)\r\n                phoneBookService\r\n                    .update(personExists.id, newObj)\r\n                    .then(returnedPerson => {\r\n                        setPersons(persons.map(person => person.id !== personExists.id ? person : returnedPerson))\r\n                        setNewName('')\r\n                        setNewPhone('')\r\n                    }\r\n                    )\r\n        }\r\n    }\r\n\r\n\r\n    const deletePerson = person => {\r\n\r\n        const result = window.confirm(`Do you want to delete ${person.name} ?`);\r\n\r\n        console.log(result)\r\n\r\n\r\n        if (result === true)\r\n            phoneBookService\r\n                .remove(person.id)\r\n                .then(response => {\r\n                    console.log('success!')\r\n                    setPersons(persons.filter(p => p.id !== person.id))\r\n                })\r\n                .catch(error => {\r\n                    console.log('fail')\r\n\r\n                    setNotificationMessage(\"Some error happened, see message \" + error)\r\n                    setNotificationType(\"error\")\r\n\r\n                    setTimeout(() => {\r\n                        setNotificationMessage(\"\")\r\n                        setNotificationType(\"\")\r\n                    }, 5000)\r\n                })\r\n    }\r\n\r\n    const Notification = ({ message, type }) => {\r\n        if (message === null) {\r\n            return null\r\n        }\r\n        return (\r\n            <div className={type}>\r\n                {message}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>Filter</h3>\r\n            Filter:\r\n            <input value={newSearch}\r\n                onChange={handleFilter} />\r\n\r\n            <h2>Phonebook</h2>\r\n            <Notification type={notificationType} message={notificationMessage} />\r\n            <form onSubmit={addPerson}>\r\n                <div>\r\n                    name:\r\n                <input value={newName}\r\n                        onChange={handlePersonNameChange} />\r\n                    number:\r\n                 <input value={newPhone}\r\n                        onChange={handlePersonPhoneChange} />\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\">add</button>\r\n                </div>\r\n            </form>\r\n            <h2>Numbers</h2>\r\n            <div>\r\n                <ul>\r\n                    {contactsToShow.map(p =>\r\n                        <Persons person={p} handleDeletion={() => deletePerson(p)} />\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Phonebook","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n      color: 'green',\r\n      fontStyle: 'italic',\r\n      fontSize: 16\r\n    }\r\n  \r\n    return (\r\n      <div style={footerStyle}>\r\n        <br />\r\n        <em>Phone Book app, Andrei Ilie Pîrvan, Software Engineer</em>\r\n      </div> \r\n    )\r\n  }\r\n\r\n\r\nexport default Footer","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport axios from 'axios'\r\nimport './index.css';\r\nimport Phonebook from './modules/Phonebook'\r\nimport Footer from './modules/Footer'\r\n\r\nconst Register = () => {\r\n\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <Phonebook />\r\n\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nReactDOM.render(\r\n  <Register />,\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}